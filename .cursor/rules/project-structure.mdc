---
description: Project structure and file organization guidelines
globs: 
alwaysApply: false
---
# Cursor Rules CLI

A CLI tool to add and manage Cursor rules in your projects. This tool helps developers integrate AI-assisted guidance into their codebases through the Cursor IDE.

## Purpose

The Cursor Rules CLI facilitates the creation, installation, and management of Cursor rules - markdown files with structured metadata that provide AI with instructions on how to interact with your codebase. These rules enhance AI's understanding of your project structure, coding conventions, and task management approach.

## Key features

- **Rule Installation**: Easily add Cursor rules to any project
- **Template Rules**: Includes default rule templates for common use cases
- **Interactive Setup**: Guided setup process using command-line prompts
- **Repomix Integration**: Generate repository overviews using Repomix for AI analysis
- **Project Structure**: Creates standardized rule organization within projects

## Directory structure

```tree
.
├── cli/                     # Main CLI package
│   ├── bin/                   # CLI executable files
│   ├── src/                   # Source code
│   │   ├── cli/                 # CLI implementation 
│   │   │   ├── actions/           # Command actions (init, version, etc.)
│   │   ├── core/                # Core functionality
│   │   │   ├── file/               # File system operations
│   │   ├── shared/              # Shared utilities
│   │   ├── templates/           # Rule templates
│   │   │   ├── rules-default/     # Default rule templates
├── example/                 # Example project for testing
│   ├── parent_folder/         # Example directory structure
│   │   ├── child_folder/        # Nested examples
│   │   ├── other_child_folder/  # More nested examples
│   ├── single_folder/         # Simple folder example
```

## Default Templates

The CLI provides the following default templates:
- **cursor-rules.md**: Guidelines for adding and organizing AI rules
- **project-structure.md**: Overview of the project and organization
- **task-list.md**: Guidelines for tracking project progress with task lists

## Usage

### Installation

**Global Install:**
```bash
# Using bun
bun add -g @gabimoncha/cursor-rules

# Using yarn
yarn global add @gabimoncha/cursor-rules

# Using npm
npm install -g @gabimoncha/cursor-rules
```

**Project Install:**
```bash
# Using bun
bun add -d @gabimoncha/cursor-rules

# Using yarn
yarn add -D @gabimoncha/cursor-rules

# Using npm
npm install --save-dev @gabimoncha/cursor-rules
```

### Commands

```bash
# Initialize cursor rules in your project
cursor-rules --init

# Generate repomix file for AI analysis
cursor-rules --repomix
```

## Technical implementation

The project is built with:
- **TypeScript**: For type-safe code
- **Commander.js**: For CLI command parsing
- **@clack/prompts**: For interactive command-line prompts
- **Repomix**: For repository analysis and overview generation
- **Zod**: For runtime type validation
- **Bun/Node.js**: For JavaScript runtime support

## Future Enhancements

- Add rule validation and linting
- Enhanced rule templates for different project types
- Implement more specialized rule templates for different project types
- Integration with more code analysis tools
- Custom rule generation based on project analysis
- UI for rule management
