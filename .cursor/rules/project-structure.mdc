---
description: Project structure and file organization guidelines
globs: 
alwaysApply: false
---
# Cursor Rules CLI

A CLI tool to bootstrap and manage Cursor rules, enabling AI-assisted guidance across any codebase from the comfort of the terminal.

## Purpose

Provide an easy-to-use command-line interface for installing, generating and maintaining **Cursor rules** so that the Cursor IDE (or any LLM) can immediately understand the structure, conventions and workflows of a project.

## Key features

- 🚀 **Interactive setup (`init`)** – scaffolds the `.cursor/rules` directory with sensible defaults.
- 📦 **Rule installation** – installs both first-party templates and community rules from `awesome-cursorrules`.
- 🪄 **Repomix integration** – produces a compressed XML snapshot of the repository for large-context models.
- 🛡 **Audit & list commands** – inspect existing rules and project paths.
- 🔄 **Auto-update & version check** – notifies users when a new CLI version is available.

## Directory structure

```tree
.
├── .github/                   # Continuous-integration workflows (tests, releases)
│   └── workflows/
│       └── tests.yml          # Runs the Bun test suite on each push
├── cli/                       # **Primary package** – all CLI source and build artifacts
│   ├── bin/                   # Executable entry script (`cursor-rules`)
│   ├── src/                   # TypeScript source organised by domain
│   │   ├── audit/             # Unicode & security helpers
│   │   ├── cli/               # Command definitions & action handlers
│   │   ├── core/              # Business logic (updates, rule install, etc.)
│   │   ├── shared/            # Constants, logger and error helpers
│   │   └── templates/         # Default rule and instruction markdown templates
│   ├── package.json           # npm manifest for the CLI package
│   ├── tsconfig*.json         # TypeScript build and IDE configs
│   └── README.md              # CLI-specific documentation
├── docs/                      # Additional markdown docs (commands, contributing, guides)
├── example/                   # Sample project used in tests & demonstrations
│   ├── parent_folder/         # Nested structure showcasing rule discovery
│   └── single_folder/         # Flat example with its own `.cursor` rules
├── scripts/                   # Maintenance / helper scripts executed via Bun
├── .cursor/                   # **This repository's own Cursor rules** (including this file)
├── FUTURE_ENHANCEMENTS.md     # Road-map and backlog
├── package.json               # Workspace root manifest (Yarn workspaces & scripts)
├── tsconfig.json              # Workspace-level TypeScript config
└── README.md                  # Project overview seen on GitHub
```

## Architecture

1. **CLI layer** – built with `commander` and `@clack/prompts` for rich, interactive commands.
2. **Core services** – pure functions that implement rule installation, version checks and Repomix generation.
3. **Templates layer** – markdown scaffolds shipped inside the package; copied & customised during `init`.
4. **Utilities & shared** – logger, error handling and constants reused throughout the codebase.

The design is intentionally modular: each layer can evolve independently and is covered by dedicated unit tests (located under `cli/src/core/__tests__`).

## Usage

```bash
# Install globally with Bun
bun add -g @gabimoncha/cursor-rules

# Initialise rules in an existing repo
cursor-rules init

# Generate a Repomix snapshot
cursor-rules repomix
```

## Technical implementation

The project is built with:
- **TypeScript** – strict, ES2022-targeted
- **Bun** – fast runtime & package manager used in CI
- **Commander.js** – command parsing
- **@clack/prompts** – TUI prompts
- **Repomix** – repository summarisation
- **Zod** – runtime validation

## Future Enhancements

- 🔍 Rule validation & linting
- 🧩 Additional language-/framework-specific templates
- 🌐 Web UI for visual rule management
